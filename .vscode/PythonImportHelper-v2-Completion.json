[
    {
        "label": "pycurl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycurl",
        "description": "pycurl",
        "detail": "pycurl",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "StringIO",
        "description": "StringIO",
        "isExtraImport": true,
        "detail": "StringIO",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "StringIO",
        "description": "StringIO",
        "isExtraImport": true,
        "detail": "StringIO",
        "documentation": {}
    },
    {
        "label": "certifi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "certifi",
        "description": "certifi",
        "detail": "certifi",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "pycurl,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycurl.",
        "description": "pycurl.",
        "detail": "pycurl.",
        "documentation": {}
    },
    {
        "label": "curl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "curl",
        "description": "curl",
        "detail": "curl",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.file_upload_buffer",
        "description": "venv.share.doc.pycurl.examples.quickstart.file_upload_buffer",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/post')\nc.setopt(c.HTTPPOST, [\n    ('fileupload', (\n        c.FORM_BUFFER, 'readme.txt',\n        c.FORM_BUFFERPTR, 'This is a fancy readme file',\n    )),\n])\nc.perform()\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.file_upload_buffer",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.file_upload_real",
        "description": "venv.share.doc.pycurl.examples.quickstart.file_upload_real",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/post')\nc.setopt(c.HTTPPOST, [\n    ('fileupload', (\n        # upload the contents of this file\n        c.FORM_FILE, __file__,\n    )),\n])\nc.perform()\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.file_upload_real",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.file_upload_real_fancy",
        "description": "venv.share.doc.pycurl.examples.quickstart.file_upload_real_fancy",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/post')\nc.setopt(c.HTTPPOST, [\n    ('fileupload', (\n        # upload the contents of this file\n        c.FORM_FILE, __file__,\n        # specify a different file name for the upload\n        c.FORM_FILENAME, 'helloworld.py',\n        # specify a different content type\n        c.FORM_CONTENTTYPE, 'application/x-python',",
        "detail": "venv.share.doc.pycurl.examples.quickstart.file_upload_real_fancy",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.follow_redirect",
        "description": "venv.share.doc.pycurl.examples.quickstart.follow_redirect",
        "peekOfCode": "c = pycurl.Curl()\n# Redirects to https://www.python.org/.\nc.setopt(c.URL, 'http://www.python.org/')\n# Follow redirect.\nc.setopt(c.FOLLOWLOCATION, True)\nc.perform()\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.follow_redirect",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.form_post",
        "description": "venv.share.doc.pycurl.examples.quickstart.form_post",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/post')\npost_data = {'field': 'value'}\n# Form data must be provided already urlencoded.\npostfields = urlencode(post_data)\n# Sets request method to POST,\n# Content-Type header to application/x-www-form-urlencoded\n# and data to send in request body.\nc.setopt(c.POSTFIELDS, postfields)\nc.perform()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.form_post",
        "documentation": {}
    },
    {
        "label": "post_data",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.form_post",
        "description": "venv.share.doc.pycurl.examples.quickstart.form_post",
        "peekOfCode": "post_data = {'field': 'value'}\n# Form data must be provided already urlencoded.\npostfields = urlencode(post_data)\n# Sets request method to POST,\n# Content-Type header to application/x-www-form-urlencoded\n# and data to send in request body.\nc.setopt(c.POSTFIELDS, postfields)\nc.perform()\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.form_post",
        "documentation": {}
    },
    {
        "label": "postfields",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.form_post",
        "description": "venv.share.doc.pycurl.examples.quickstart.form_post",
        "peekOfCode": "postfields = urlencode(post_data)\n# Sets request method to POST,\n# Content-Type header to application/x-www-form-urlencoded\n# and data to send in request body.\nc.setopt(c.POSTFIELDS, postfields)\nc.perform()\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.form_post",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get",
        "description": "venv.share.doc.pycurl.examples.quickstart.get",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string on Python 2 and a byte string on Python 3.",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get",
        "description": "venv.share.doc.pycurl.examples.quickstart.get",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string on Python 2 and a byte string on Python 3.\n# If we know the encoding, we can always decode the body and",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get",
        "description": "venv.share.doc.pycurl.examples.quickstart.get",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a string on Python 2 and a byte string on Python 3.\n# If we know the encoding, we can always decode the body and\n# end up with a Unicode string.\nprint(body.decode('iso-8859-1'))",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python2",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python2",
        "peekOfCode": "buffer = StringIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string in some encoding.",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python2",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python2",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python2",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string in some encoding.\n# In Python 2, we can print it without knowing what the encoding is.",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python2",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python2",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python2",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a string in some encoding.\n# In Python 2, we can print it without knowing what the encoding is.\nprint(body)",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python2",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python2_https",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python2_https",
        "peekOfCode": "buffer = StringIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.setopt(c.CAINFO, certifi.where())\nc.perform()\nc.close()\nbody = buffer.getvalue()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python2_https",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python2_https",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python2_https",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.setopt(c.CAINFO, certifi.where())\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string in some encoding.",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python2_https",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python2_https",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python2_https",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a string in some encoding.\n# In Python 2, we can print it without knowing what the encoding is.\nprint(body)",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python2_https",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python3",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python3",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python3",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python3",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python3",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.\nprint(body.decode('iso-8859-1'))",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python3",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python3",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python3",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.\nprint(body.decode('iso-8859-1'))",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python3",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python3_https",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python3_https",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.setopt(c.CAINFO, certifi.where())\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python3_https",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python3_https",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python3_https",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.setopt(c.CAINFO, certifi.where())\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python3_https",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.get_python3_https",
        "description": "venv.share.doc.pycurl.examples.quickstart.get_python3_https",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.\nprint(body.decode('iso-8859-1'))",
        "detail": "venv.share.doc.pycurl.examples.quickstart.get_python3_https",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.put_buffer",
        "description": "venv.share.doc.pycurl.examples.quickstart.put_buffer",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/put')\nc.setopt(c.UPLOAD, 1)\ndata = '{\"json\":true}'\n# READDATA requires an IO-like object; a string is not accepted\n# encode() is necessary for Python 3\nbuffer = BytesIO(data.encode('utf-8'))\nc.setopt(c.READDATA, buffer)\nc.perform()\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.put_buffer",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.put_buffer",
        "description": "venv.share.doc.pycurl.examples.quickstart.put_buffer",
        "peekOfCode": "data = '{\"json\":true}'\n# READDATA requires an IO-like object; a string is not accepted\n# encode() is necessary for Python 3\nbuffer = BytesIO(data.encode('utf-8'))\nc.setopt(c.READDATA, buffer)\nc.perform()\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.put_buffer",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.put_buffer",
        "description": "venv.share.doc.pycurl.examples.quickstart.put_buffer",
        "peekOfCode": "buffer = BytesIO(data.encode('utf-8'))\nc.setopt(c.READDATA, buffer)\nc.perform()\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.put_buffer",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.put_file",
        "description": "venv.share.doc.pycurl.examples.quickstart.put_file",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/put')\nc.setopt(c.UPLOAD, 1)\nfile = open(__file__)\nc.setopt(c.READDATA, file)\nc.perform()\nc.close()\n# File must be kept open while Curl object is using it\nfile.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.put_file",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.put_file",
        "description": "venv.share.doc.pycurl.examples.quickstart.put_file",
        "peekOfCode": "file = open(__file__)\nc.setopt(c.READDATA, file)\nc.perform()\nc.close()\n# File must be kept open while Curl object is using it\nfile.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.put_file",
        "documentation": {}
    },
    {
        "label": "header_function",
        "kind": 2,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "def header_function(header_line):\n    # HTTP standard specifies that headers are encoded in iso-8859-1.\n    # On Python 2, decoding step can be skipped.\n    # On Python 3, decoding step is required.\n    header_line = header_line.decode('iso-8859-1')\n    # Header lines include the first status line (HTTP/1.x ...).\n    # We are going to ignore all lines that don't have a colon in them.\n    # This will botch headers that are split on multiple lines...\n    if ':' not in header_line:\n        return",
        "detail": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "headers = {}\ndef header_function(header_line):\n    # HTTP standard specifies that headers are encoded in iso-8859-1.\n    # On Python 2, decoding step can be skipped.\n    # On Python 3, decoding step is required.\n    header_line = header_line.decode('iso-8859-1')\n    # Header lines include the first status line (HTTP/1.x ...).\n    # We are going to ignore all lines that don't have a colon in them.\n    # This will botch headers that are split on multiple lines...\n    if ':' not in header_line:",
        "detail": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io')\nc.setopt(c.WRITEFUNCTION, buffer.write)\n# Set our header function.\nc.setopt(c.HEADERFUNCTION, header_function)\nc.perform()\nc.close()\n# Figure out what encoding was sent with the response, if any.\n# Check against lowercased header name.",
        "detail": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io')\nc.setopt(c.WRITEFUNCTION, buffer.write)\n# Set our header function.\nc.setopt(c.HEADERFUNCTION, header_function)\nc.perform()\nc.close()\n# Figure out what encoding was sent with the response, if any.\n# Check against lowercased header name.\nencoding = None",
        "detail": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "encoding",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "encoding = None\nif 'content-type' in headers:\n    content_type = headers['content-type'].lower()\n    match = re.search('charset=(\\S+)', content_type)\n    if match:\n        encoding = match.group(1)\n        print('Decoding using %s' % encoding)\nif encoding is None:\n    # Default encoding for HTML is iso-8859-1.\n    # Other content types may have different default encoding,",
        "detail": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "body = buffer.getvalue()\n# Decode using the encoding we figured out.\nprint(body.decode(encoding))",
        "detail": "venv.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.response_info",
        "description": "venv.share.doc.pycurl.examples.quickstart.response_info",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.perform()\n# HTTP response code, e.g. 200.\nprint('Status: %d' % c.getinfo(c.RESPONSE_CODE))\n# Elapsed time for the transfer.\nprint('Time: %f' % c.getinfo(c.TOTAL_TIME))\n# getinfo must be called before close.",
        "detail": "venv.share.doc.pycurl.examples.quickstart.response_info",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.quickstart.response_info",
        "description": "venv.share.doc.pycurl.examples.quickstart.response_info",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.perform()\n# HTTP response code, e.g. 200.\nprint('Status: %d' % c.getinfo(c.RESPONSE_CODE))\n# Elapsed time for the transfer.\nprint('Time: %f' % c.getinfo(c.TOTAL_TIME))\n# getinfo must be called before close.\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.quickstart.response_info",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "venv.share.doc.pycurl.examples.basicfirst",
        "description": "venv.share.doc.pycurl.examples.basicfirst",
        "peekOfCode": "class Test:\n    def __init__(self):\n        self.contents = ''\n        if PY3:\n            self.contents = self.contents.encode('ascii')\n    def body_callback(self, buf):\n        self.contents = self.contents + buf\nsys.stderr.write(\"Testing %s\\n\" % pycurl.version)\nt = Test()\nc = pycurl.Curl()",
        "detail": "venv.share.doc.pycurl.examples.basicfirst",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.basicfirst",
        "description": "venv.share.doc.pycurl.examples.basicfirst",
        "peekOfCode": "PY3 = sys.version_info[0] > 2\nclass Test:\n    def __init__(self):\n        self.contents = ''\n        if PY3:\n            self.contents = self.contents.encode('ascii')\n    def body_callback(self, buf):\n        self.contents = self.contents + buf\nsys.stderr.write(\"Testing %s\\n\" % pycurl.version)\nt = Test()",
        "detail": "venv.share.doc.pycurl.examples.basicfirst",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.basicfirst",
        "description": "venv.share.doc.pycurl.examples.basicfirst",
        "peekOfCode": "t = Test()\nc = pycurl.Curl()\nc.setopt(c.URL, 'https://curl.haxx.se/dev/')\nc.setopt(c.WRITEFUNCTION, t.body_callback)\nc.perform()\nc.close()\nprint(t.contents)",
        "detail": "venv.share.doc.pycurl.examples.basicfirst",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.basicfirst",
        "description": "venv.share.doc.pycurl.examples.basicfirst",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://curl.haxx.se/dev/')\nc.setopt(c.WRITEFUNCTION, t.body_callback)\nc.perform()\nc.close()\nprint(t.contents)",
        "detail": "venv.share.doc.pycurl.examples.basicfirst",
        "documentation": {}
    },
    {
        "label": "FileReader",
        "kind": 6,
        "importPath": "venv.share.doc.pycurl.examples.file_upload",
        "description": "venv.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "class FileReader:\n    def __init__(self, fp):\n        self.fp = fp\n    def read_callback(self, size):\n        return self.fp.read(size)\n# Check commandline arguments\nif len(sys.argv) < 3:\n    print(\"Usage: %s <url> <file to upload>\" % sys.argv[0])\n    raise SystemExit\nurl = sys.argv[1]",
        "detail": "venv.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.file_upload",
        "description": "venv.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "url = sys.argv[1]\nfilename = sys.argv[2]\nif not os.path.exists(filename):\n    print(\"Error: the file '%s' does not exist\" % filename)\n    raise SystemExit\n# Initialize pycurl\nc = pycurl.Curl()\nc.setopt(pycurl.URL, url)\nc.setopt(pycurl.UPLOAD, 1)\n# Two versions with the same semantics here, but the filereader version",
        "detail": "venv.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.file_upload",
        "description": "venv.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "filename = sys.argv[2]\nif not os.path.exists(filename):\n    print(\"Error: the file '%s' does not exist\" % filename)\n    raise SystemExit\n# Initialize pycurl\nc = pycurl.Curl()\nc.setopt(pycurl.URL, url)\nc.setopt(pycurl.UPLOAD, 1)\n# Two versions with the same semantics here, but the filereader version\n# is useful when you have to process the data which is read before returning",
        "detail": "venv.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.file_upload",
        "description": "venv.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(pycurl.URL, url)\nc.setopt(pycurl.UPLOAD, 1)\n# Two versions with the same semantics here, but the filereader version\n# is useful when you have to process the data which is read before returning\nif 1:\n    c.setopt(pycurl.READFUNCTION, FileReader(open(filename, 'rb')).read_callback)\nelse:\n    c.setopt(pycurl.READFUNCTION, open(filename, 'rb').read)\n# Set size of file to be uploaded.",
        "detail": "venv.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "filesize",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.file_upload",
        "description": "venv.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "filesize = os.path.getsize(filename)\nc.setopt(pycurl.INFILESIZE, filesize)\n# Start transfer\nprint('Uploading file %s to url %s' % (filename, url))\nc.perform()\nc.close()",
        "detail": "venv.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "LinksysError",
        "kind": 6,
        "importPath": "venv.share.doc.pycurl.examples.linksys",
        "description": "venv.share.doc.pycurl.examples.linksys",
        "peekOfCode": "class LinksysError(exceptions.Exception):\n    def __init__(self, *args):\n        self.args = args\nclass LinksysSession:\n    months = 'Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec'\n    WAN_CONNECT_AUTO = '1'\n    WAN_CONNECT_STATIC = '2'\n    WAN_CONNECT_PPOE = '3'\n    WAN_CONNECT_RAS = '4'\n    WAN_CONNECT_PPTP = '5'",
        "detail": "venv.share.doc.pycurl.examples.linksys",
        "documentation": {}
    },
    {
        "label": "LinksysSession",
        "kind": 6,
        "importPath": "venv.share.doc.pycurl.examples.linksys",
        "description": "venv.share.doc.pycurl.examples.linksys",
        "peekOfCode": "class LinksysSession:\n    months = 'Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec'\n    WAN_CONNECT_AUTO = '1'\n    WAN_CONNECT_STATIC = '2'\n    WAN_CONNECT_PPOE = '3'\n    WAN_CONNECT_RAS = '4'\n    WAN_CONNECT_PPTP = '5'\n    WAN_CONNECT_HEARTBEAT = '6'\n    # Substrings to check for on each page load.\n    # This may enable us to detect when a firmware change has hosed us.",
        "detail": "venv.share.doc.pycurl.examples.linksys",
        "documentation": {}
    },
    {
        "label": "print_stderr",
        "kind": 2,
        "importPath": "venv.share.doc.pycurl.examples.linksys",
        "description": "venv.share.doc.pycurl.examples.linksys",
        "peekOfCode": "def print_stderr(arg):\n    sys.stderr.write(arg)\n    sys.stderr.write(\"\\n\")\nclass LinksysError(exceptions.Exception):\n    def __init__(self, *args):\n        self.args = args\nclass LinksysSession:\n    months = 'Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec'\n    WAN_CONNECT_AUTO = '1'\n    WAN_CONNECT_STATIC = '2'",
        "detail": "venv.share.doc.pycurl.examples.linksys",
        "documentation": {}
    },
    {
        "label": "socket_fn",
        "kind": 2,
        "importPath": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "description": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "peekOfCode": "def socket_fn(what, sock_fd, multi, socketp):\n    if what == pycurl.POLL_IN or what == pycurl.POLL_INOUT:\n        state['rlist'].append(sock_fd)\n    elif what == pycurl.POLL_OUT or what == pycurl.POLL_INOUT:\n        state['wlist'].append(sock_fd)\n    elif what == pycurl.POLL_REMOVE:\n        if sock_fd in state['rlist']:\n            state['rlist'].remove(sock_fd)\n        if sock_fd in state['wlist']:\n            state['wlist'].remove(sock_fd)",
        "detail": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "documentation": {}
    },
    {
        "label": "work",
        "kind": 2,
        "importPath": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "description": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "peekOfCode": "def work(timeout):\n    rready, wready, xready = select.select(\n        state['rlist'], state['wlist'], set(state['rlist']) | set(state['wlist']), timeout)\n    if len(rready) == 0 and len(wready) == 0 and len(xready) == 0:\n        # The number of running handles must be updated after each\n        # call to socket_action, which includes those with the SOCKET_TIMEOUT\n        # argument (otherwise e.g. a transfer which failed due to\n        # exceeding the connection timeout would hang).\n        _, running = multi.socket_action(pycurl.SOCKET_TIMEOUT, 0)\n    else:",
        "detail": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "documentation": {}
    },
    {
        "label": "timer_fn",
        "kind": 2,
        "importPath": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "description": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "peekOfCode": "def timer_fn(timeout_ms):\n    if timeout_ms < 0:\n        # libcurl passes a negative timeout value when no further\n        # calls should be made.\n        state['timeout'] = None\n    state['timeout'] = timeout_ms / 1000.0\nmulti = pycurl.CurlMulti()\nmulti.setopt(pycurl.M_SOCKETFUNCTION, socket_fn)\nmulti.setopt(pycurl.M_TIMERFUNCTION, timer_fn)\neasy = pycurl.Curl()",
        "detail": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "description": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "peekOfCode": "state = {\n    'rlist': [],\n    'wlist': [],\n    'running': None,\n    'timeout': None,\n    'result': None,\n    # If the transfer failed, code and msg will be filled in.\n    'code': None,\n    'msg': None,\n}",
        "detail": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "documentation": {}
    },
    {
        "label": "multi",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "description": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "peekOfCode": "multi = pycurl.CurlMulti()\nmulti.setopt(pycurl.M_SOCKETFUNCTION, socket_fn)\nmulti.setopt(pycurl.M_TIMERFUNCTION, timer_fn)\neasy = pycurl.Curl()\neasy.setopt(pycurl.URL, url)\n# Uncomment to see what libcurl is doing throughout the transfer.\n#easy.setopt(pycurl.VERBOSE, 1)\neasy.setopt(pycurl.CONNECTTIMEOUT, 5)\neasy.setopt(pycurl.LOW_SPEED_TIME, 5)\neasy.setopt(pycurl.LOW_SPEED_LIMIT, 1)",
        "detail": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "documentation": {}
    },
    {
        "label": "easy",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "description": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "peekOfCode": "easy = pycurl.Curl()\neasy.setopt(pycurl.URL, url)\n# Uncomment to see what libcurl is doing throughout the transfer.\n#easy.setopt(pycurl.VERBOSE, 1)\neasy.setopt(pycurl.CONNECTTIMEOUT, 5)\neasy.setopt(pycurl.LOW_SPEED_TIME, 5)\neasy.setopt(pycurl.LOW_SPEED_LIMIT, 1)\n_io = BytesIO()\neasy.setopt(pycurl.WRITEDATA, _io)\nmulti.add_handle(easy)",
        "detail": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "documentation": {}
    },
    {
        "label": "_io",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "description": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "peekOfCode": "_io = BytesIO()\neasy.setopt(pycurl.WRITEDATA, _io)\nmulti.add_handle(easy)\nhandles = multi.socket_action(pycurl.SOCKET_TIMEOUT, 0)\n# This should invoke the timer function with a timeout value.\nwhile True:\n    if state['running'] == 0:\n        break\n    else:\n        # By the time we get here, timer function should have been already",
        "detail": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "documentation": {}
    },
    {
        "label": "handles",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "description": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "peekOfCode": "handles = multi.socket_action(pycurl.SOCKET_TIMEOUT, 0)\n# This should invoke the timer function with a timeout value.\nwhile True:\n    if state['running'] == 0:\n        break\n    else:\n        # By the time we get here, timer function should have been already\n        # invoked at least once so that we have a libcurl-supplied\n        # timeout value. But in case this hasn't happened, default the timeout\n        # to 1 second.",
        "detail": "venv.share.doc.pycurl.examples.multi-socket_action-select",
        "documentation": {}
    },
    {
        "label": "ConnectionRejected",
        "kind": 6,
        "importPath": "venv.share.doc.pycurl.examples.opensocketexception",
        "description": "venv.share.doc.pycurl.examples.opensocketexception",
        "peekOfCode": "class ConnectionRejected(Exception):\n    pass\ndef opensocket(curl, purpose, curl_address):\n    if random.random() < 0.5:\n        curl.exception = ConnectionRejected('Rejecting connection attempt in opensocket callback')\n        return pycurl.SOCKET_BAD\n    family, socktype, protocol, address = curl_address\n    s = socket.socket(family, socktype, protocol)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n    return s",
        "detail": "venv.share.doc.pycurl.examples.opensocketexception",
        "documentation": {}
    },
    {
        "label": "opensocket",
        "kind": 2,
        "importPath": "venv.share.doc.pycurl.examples.opensocketexception",
        "description": "venv.share.doc.pycurl.examples.opensocketexception",
        "peekOfCode": "def opensocket(curl, purpose, curl_address):\n    if random.random() < 0.5:\n        curl.exception = ConnectionRejected('Rejecting connection attempt in opensocket callback')\n        return pycurl.SOCKET_BAD\n    family, socktype, protocol, address = curl_address\n    s = socket.socket(family, socktype, protocol)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n    return s\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io')",
        "detail": "venv.share.doc.pycurl.examples.opensocketexception",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.opensocketexception",
        "description": "venv.share.doc.pycurl.examples.opensocketexception",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io')\nc.exception = None\nc.setopt(c.OPENSOCKETFUNCTION,\n    lambda purpose, address: opensocket(c, purpose, address))\ntry:\n    c.perform()\nexcept pycurl.error as e:\n    if e.args[0] == pycurl.E_COULDNT_CONNECT and c.exception:\n        print(c.exception)",
        "detail": "venv.share.doc.pycurl.examples.opensocketexception",
        "documentation": {}
    },
    {
        "label": "c.exception",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.opensocketexception",
        "description": "venv.share.doc.pycurl.examples.opensocketexception",
        "peekOfCode": "c.exception = None\nc.setopt(c.OPENSOCKETFUNCTION,\n    lambda purpose, address: opensocket(c, purpose, address))\ntry:\n    c.perform()\nexcept pycurl.error as e:\n    if e.args[0] == pycurl.E_COULDNT_CONNECT and c.exception:\n        print(c.exception)\n    else:\n        print(e)",
        "detail": "venv.share.doc.pycurl.examples.opensocketexception",
        "documentation": {}
    },
    {
        "label": "num_conn",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever-multi",
        "description": "venv.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "num_conn = 10\ntry:\n    if sys.argv[1] == \"-\":\n        urls = sys.stdin.readlines()\n    else:\n        urls = open(sys.argv[1]).readlines()\n    if len(sys.argv) >= 3:\n        num_conn = int(sys.argv[2])\nexcept:\n    print(\"Usage: %s <file with URLs to fetch> [<# of concurrent connections>]\" % sys.argv[0])",
        "detail": "venv.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever-multi",
        "description": "venv.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "queue = []\nfor url in urls:\n    url = url.strip()\n    if not url or url[0] == \"#\":\n        continue\n    filename = \"doc_%03d.dat\" % (len(queue) + 1)\n    queue.append((url, filename))\n# Check args\nassert queue, \"no URLs given\"\nnum_urls = len(queue)",
        "detail": "venv.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "num_urls",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever-multi",
        "description": "venv.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "num_urls = len(queue)\nnum_conn = min(num_conn, num_urls)\nassert 1 <= num_conn <= 10000, \"invalid number of concurrent connections\"\nprint(\"PycURL %s (compiled against 0x%x)\" % (pycurl.version, pycurl.COMPILE_LIBCURL_VERSION_NUM))\nprint(\"----- Getting\", num_urls, \"URLs using\", num_conn, \"connections -----\")\n# Pre-allocate a list of curl objects\nm = pycurl.CurlMulti()\nm.handles = []\nfor i in range(num_conn):\n    c = pycurl.Curl()",
        "detail": "venv.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "num_conn",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever-multi",
        "description": "venv.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "num_conn = min(num_conn, num_urls)\nassert 1 <= num_conn <= 10000, \"invalid number of concurrent connections\"\nprint(\"PycURL %s (compiled against 0x%x)\" % (pycurl.version, pycurl.COMPILE_LIBCURL_VERSION_NUM))\nprint(\"----- Getting\", num_urls, \"URLs using\", num_conn, \"connections -----\")\n# Pre-allocate a list of curl objects\nm = pycurl.CurlMulti()\nm.handles = []\nfor i in range(num_conn):\n    c = pycurl.Curl()\n    c.fp = None",
        "detail": "venv.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever-multi",
        "description": "venv.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "m = pycurl.CurlMulti()\nm.handles = []\nfor i in range(num_conn):\n    c = pycurl.Curl()\n    c.fp = None\n    c.setopt(pycurl.FOLLOWLOCATION, 1)\n    c.setopt(pycurl.MAXREDIRS, 5)\n    c.setopt(pycurl.CONNECTTIMEOUT, 30)\n    c.setopt(pycurl.TIMEOUT, 300)\n    c.setopt(pycurl.NOSIGNAL, 1)",
        "detail": "venv.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "m.handles",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever-multi",
        "description": "venv.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "m.handles = []\nfor i in range(num_conn):\n    c = pycurl.Curl()\n    c.fp = None\n    c.setopt(pycurl.FOLLOWLOCATION, 1)\n    c.setopt(pycurl.MAXREDIRS, 5)\n    c.setopt(pycurl.CONNECTTIMEOUT, 30)\n    c.setopt(pycurl.TIMEOUT, 300)\n    c.setopt(pycurl.NOSIGNAL, 1)\n    m.handles.append(c)",
        "detail": "venv.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "freelist",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever-multi",
        "description": "venv.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "freelist = m.handles[:]\nnum_processed = 0\nwhile num_processed < num_urls:\n    # If there is an url to process and a free curl object, add to multi stack\n    while queue and freelist:\n        url, filename = queue.pop(0)\n        c = freelist.pop()\n        c.fp = open(filename, \"wb\")\n        c.setopt(pycurl.URL, url)\n        c.setopt(pycurl.WRITEDATA, c.fp)",
        "detail": "venv.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "num_processed",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever-multi",
        "description": "venv.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "num_processed = 0\nwhile num_processed < num_urls:\n    # If there is an url to process and a free curl object, add to multi stack\n    while queue and freelist:\n        url, filename = queue.pop(0)\n        c = freelist.pop()\n        c.fp = open(filename, \"wb\")\n        c.setopt(pycurl.URL, url)\n        c.setopt(pycurl.WRITEDATA, c.fp)\n        m.add_handle(c)",
        "detail": "venv.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "WorkerThread",
        "kind": 6,
        "importPath": "venv.share.doc.pycurl.examples.retriever",
        "description": "venv.share.doc.pycurl.examples.retriever",
        "peekOfCode": "class WorkerThread(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self.queue = queue\n    def run(self):\n        while 1:\n            try:\n                url, filename = self.queue.get_nowait()\n            except Queue.Empty:\n                raise SystemExit",
        "detail": "venv.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "num_conn",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever",
        "description": "venv.share.doc.pycurl.examples.retriever",
        "peekOfCode": "num_conn = 10\ntry:\n    if sys.argv[1] == \"-\":\n        urls = sys.stdin.readlines()\n    else:\n        urls = open(sys.argv[1]).readlines()\n    if len(sys.argv) >= 3:\n        num_conn = int(sys.argv[2])\nexcept:\n    print(\"Usage: %s <file with URLs to fetch> [<# of concurrent connections>]\" % sys.argv[0])",
        "detail": "venv.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever",
        "description": "venv.share.doc.pycurl.examples.retriever",
        "peekOfCode": "queue = Queue.Queue()\nfor url in urls:\n    url = url.strip()\n    if not url or url[0] == \"#\":\n        continue\n    filename = \"doc_%03d.dat\" % (len(queue.queue) + 1)\n    queue.put((url, filename))\n# Check args\nassert queue.queue, \"no URLs given\"\nnum_urls = len(queue.queue)",
        "detail": "venv.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "num_urls",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever",
        "description": "venv.share.doc.pycurl.examples.retriever",
        "peekOfCode": "num_urls = len(queue.queue)\nnum_conn = min(num_conn, num_urls)\nassert 1 <= num_conn <= 10000, \"invalid number of concurrent connections\"\nprint(\"PycURL %s (compiled against 0x%x)\" % (pycurl.version, pycurl.COMPILE_LIBCURL_VERSION_NUM))\nprint(\"----- Getting\", num_urls, \"URLs using\", num_conn, \"connections -----\")\nclass WorkerThread(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self.queue = queue\n    def run(self):",
        "detail": "venv.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "num_conn",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever",
        "description": "venv.share.doc.pycurl.examples.retriever",
        "peekOfCode": "num_conn = min(num_conn, num_urls)\nassert 1 <= num_conn <= 10000, \"invalid number of concurrent connections\"\nprint(\"PycURL %s (compiled against 0x%x)\" % (pycurl.version, pycurl.COMPILE_LIBCURL_VERSION_NUM))\nprint(\"----- Getting\", num_urls, \"URLs using\", num_conn, \"connections -----\")\nclass WorkerThread(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self.queue = queue\n    def run(self):\n        while 1:",
        "detail": "venv.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.retriever",
        "description": "venv.share.doc.pycurl.examples.retriever",
        "peekOfCode": "threads = []\nfor dummy in range(num_conn):\n    t = WorkerThread(queue)\n    t.start()\n    threads.append(t)\n# Wait for all threads to finish\nfor thread in threads:\n    thread.join()",
        "detail": "venv.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "SourceForgeUserSession",
        "kind": 6,
        "importPath": "venv.share.doc.pycurl.examples.sfquery",
        "description": "venv.share.doc.pycurl.examples.sfquery",
        "peekOfCode": "class SourceForgeUserSession(curl.Curl):\n    # SourceForge-specific methods.  Sensitive to changes in site design.\n    def login(self, name, password):\n        \"Establish a login session.\"\n        self.post(\"account/login.php\", ((\"form_loginname\", name),\n                                        (\"form_pw\", password),\n                                        (\"return_to\", \"\"),\n                                        (\"stay_in_ssl\", \"1\"),\n                                        (\"login\", \"Login With SSL\")))\n    def logout(self):",
        "detail": "venv.share.doc.pycurl.examples.sfquery",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.smtp",
        "description": "venv.share.doc.pycurl.examples.smtp",
        "peekOfCode": "PY3 = sys.version_info[0] > 2\nmail_server = 'smtp://%s' % localhost\nmail_from = 'sender@example.org'\nmail_to = 'addressee@example.net'\nc = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s",
        "detail": "venv.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "mail_server",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.smtp",
        "description": "venv.share.doc.pycurl.examples.smtp",
        "peekOfCode": "mail_server = 'smtp://%s' % localhost\nmail_from = 'sender@example.org'\nmail_to = 'addressee@example.net'\nc = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s\nTo: %s",
        "detail": "venv.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "mail_from",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.smtp",
        "description": "venv.share.doc.pycurl.examples.smtp",
        "peekOfCode": "mail_from = 'sender@example.org'\nmail_to = 'addressee@example.net'\nc = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s\nTo: %s\nSubject: PycURL SMTP example",
        "detail": "venv.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "mail_to",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.smtp",
        "description": "venv.share.doc.pycurl.examples.smtp",
        "peekOfCode": "mail_to = 'addressee@example.net'\nc = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s\nTo: %s\nSubject: PycURL SMTP example\nSMTP example via PycURL",
        "detail": "venv.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.smtp",
        "description": "venv.share.doc.pycurl.examples.smtp",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s\nTo: %s\nSubject: PycURL SMTP example\nSMTP example via PycURL\n''' % (mail_from, mail_to)",
        "detail": "venv.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.smtp",
        "description": "venv.share.doc.pycurl.examples.smtp",
        "peekOfCode": "message = '''\\\nFrom: %s\nTo: %s\nSubject: PycURL SMTP example\nSMTP example via PycURL\n''' % (mail_from, mail_to)\nif PY3:\n    message = message.encode('ascii')\n# libcurl does not perform buffering, therefore\n# we need to wrap the message string into a BytesIO or StringIO.",
        "detail": "venv.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.smtp",
        "description": "venv.share.doc.pycurl.examples.smtp",
        "peekOfCode": "io = BytesIO(message)\nc.setopt(c.READDATA, io)\n# If UPLOAD is not set, libcurl performs SMTP VRFY.\n# Setting UPLOAD to True sends a message.\nc.setopt(c.UPLOAD, True)\n# Observe SMTP conversation.\nc.setopt(c.VERBOSE, True)\nc.perform()",
        "detail": "venv.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "keyfunction",
        "kind": 2,
        "importPath": "venv.share.doc.pycurl.examples.ssh_keyfunction",
        "description": "venv.share.doc.pycurl.examples.ssh_keyfunction",
        "peekOfCode": "def keyfunction(known_key, found_key, match):\n    return c.KHSTAT_FINE\nc.setopt(c.SSH_KNOWNHOSTS, '.known_hosts')\nc.setopt(c.SSH_KEYFUNCTION, keyfunction)\nc.perform()",
        "detail": "venv.share.doc.pycurl.examples.ssh_keyfunction",
        "documentation": {}
    },
    {
        "label": "sftp_server",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.ssh_keyfunction",
        "description": "venv.share.doc.pycurl.examples.ssh_keyfunction",
        "peekOfCode": "sftp_server = 'sftp://web.sourceforge.net'\nc = pycurl.Curl()\nc.setopt(c.URL, sftp_server)\nc.setopt(c.VERBOSE, True)\ndef keyfunction(known_key, found_key, match):\n    return c.KHSTAT_FINE\nc.setopt(c.SSH_KNOWNHOSTS, '.known_hosts')\nc.setopt(c.SSH_KEYFUNCTION, keyfunction)\nc.perform()",
        "detail": "venv.share.doc.pycurl.examples.ssh_keyfunction",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.ssh_keyfunction",
        "description": "venv.share.doc.pycurl.examples.ssh_keyfunction",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, sftp_server)\nc.setopt(c.VERBOSE, True)\ndef keyfunction(known_key, found_key, match):\n    return c.KHSTAT_FINE\nc.setopt(c.SSH_KNOWNHOSTS, '.known_hosts')\nc.setopt(c.SSH_KEYFUNCTION, keyfunction)\nc.perform()",
        "detail": "venv.share.doc.pycurl.examples.ssh_keyfunction",
        "documentation": {}
    },
    {
        "label": "CURLTransport",
        "kind": 6,
        "importPath": "venv.share.doc.pycurl.examples.xmlrpc_curl",
        "description": "venv.share.doc.pycurl.examples.xmlrpc_curl",
        "peekOfCode": "class CURLTransport(xmlrpclib.Transport):\n    \"\"\"Handles a cURL HTTP transaction to an XML-RPC server.\"\"\"\n    xmlrpc_h = [ \"Content-Type: text/xml\" ]\n    def __init__(self, username=None, password=None):\n        self.c = pycurl.Curl()\n        self.c.setopt(pycurl.POST, 1)\n        self.c.setopt(pycurl.NOSIGNAL, 1)\n        self.c.setopt(pycurl.CONNECTTIMEOUT, 30)\n        self.c.setopt(pycurl.HTTPHEADER, self.xmlrpc_h)\n        if username != None and password != None:",
        "detail": "venv.share.doc.pycurl.examples.xmlrpc_curl",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "venv.share.doc.pycurl.examples.xmlrpc_curl",
        "description": "venv.share.doc.pycurl.examples.xmlrpc_curl",
        "peekOfCode": "PY3 = sys.version_info[0] > 2\nclass CURLTransport(xmlrpclib.Transport):\n    \"\"\"Handles a cURL HTTP transaction to an XML-RPC server.\"\"\"\n    xmlrpc_h = [ \"Content-Type: text/xml\" ]\n    def __init__(self, username=None, password=None):\n        self.c = pycurl.Curl()\n        self.c.setopt(pycurl.POST, 1)\n        self.c.setopt(pycurl.NOSIGNAL, 1)\n        self.c.setopt(pycurl.CONNECTTIMEOUT, 30)\n        self.c.setopt(pycurl.HTTPHEADER, self.xmlrpc_h)",
        "detail": "venv.share.doc.pycurl.examples.xmlrpc_curl",
        "documentation": {}
    },
    {
        "label": "get_exchange_rates",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_exchange_rates(base_currency):\n    url = app.config['EXCHANGE_API_URL_LATEST'].format(api_key=app.config['API_KEY']) # noqa\n    response = requests.get(url + base_currency)\n    data = response.json()\n    return data\n@app.route('/convert', methods=['GET'])\ndef get_pair_amount():\n    base_code = request.args.get('base_currency')  # получаем с фронта\n    target_code = request.args.get('target_currency')  # получаем с фронта\n    amount = request.args.get('amount')  # получаем с фронта",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_pair_amount",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_pair_amount():\n    base_code = request.args.get('base_currency')  # получаем с фронта\n    target_code = request.args.get('target_currency')  # получаем с фронта\n    amount = request.args.get('amount')  # получаем с фронта\n    url = app.config['EXCHANGE_API_URL_PAIR'].format(api_key=app.config['API_KEY']) # noqa\n    full_url = f\"{url}{base_code}/{target_code}/{amount}\"\n    response = requests.get(full_url)\n    return response.json()\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(Config)\ncurrencies = ['USD', 'EUR', 'GBP']\n@app.route('/exchange-rates/<string:base_currency>')\ndef get_exchange_rates(base_currency):\n    url = app.config['EXCHANGE_API_URL_LATEST'].format(api_key=app.config['API_KEY']) # noqa\n    response = requests.get(url + base_currency)\n    data = response.json()\n    return data\n@app.route('/convert', methods=['GET'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "currencies",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "currencies = ['USD', 'EUR', 'GBP']\n@app.route('/exchange-rates/<string:base_currency>')\ndef get_exchange_rates(base_currency):\n    url = app.config['EXCHANGE_API_URL_LATEST'].format(api_key=app.config['API_KEY']) # noqa\n    response = requests.get(url + base_currency)\n    data = response.json()\n    return data\n@app.route('/convert', methods=['GET'])\ndef get_pair_amount():\n    base_code = request.args.get('base_currency')  # получаем с фронта",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    API_KEY = 'e581ccb2c93d0464557922c0'\n    EXCHANGE_API_URL_LATEST = 'https://v6.exchangerate-api.com/v6/{api_key}/latest/'\n    EXCHANGE_API_URL_PAIR = 'https://v6.exchangerate-api.com/v6/{api_key}/pair/'\n    CURRENCY_CODES = [\n            {\"code\": \"AED\", \"name\": \"UAE Dirham\", \"country\": \"United Arab Emirates\"},\n            {\"code\": \"AFN\", \"name\": \"Afghan Afghani\", \"country\": \"Afghanistan\"},\n            {\"code\": \"ALL\", \"name\": \"Albanian Lek\", \"country\": \"Albania\"},\n            {\"code\": \"AMD\", \"name\": \"Armenian Dram\", \"country\": \"Armenia\"},\n            {\"code\": \"ANG\", \"name\": \"Netherlands Antillian Guilder\", \"country\": \"Netherlands Antilles\"},",
        "detail": "config",
        "documentation": {}
    }
]